create table "public"."discord_invites" (
    "id" bigint generated by default as identity not null,
    "invite_used" boolean not null,
    "time_invite_used" timestamp with time zone,
    "user_profile_id" uuid,
    "invite_code" text
);


alter table "public"."discord_invites" enable row level security;

create table "public"."discord_profiles" (
    "id" bigint generated by default as identity not null,
    "discord_profile_id" text,
    "user_profile_id" uuid not null
);


alter table "public"."discord_profiles" enable row level security;

create table "public"."invitations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "inviter_id" uuid not null,
    "invitee_id" uuid not null,
    "team_id" bigint not null
);


alter table "public"."invitations" enable row level security;

create table "public"."requests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "hacker_id" uuid not null,
    "organizer_id" uuid not null,
    "team_id" bigint not null
);


alter table "public"."requests" enable row level security;

create table "public"."teams" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" character varying not null,
    "key" uuid not null default uuid_generate_v4(),
    "description" text default ''::text,
    "photo_key" character varying,
    "team_id" bigint,
    "organizer_id" uuid not null
);


alter table "public"."teams" enable row level security;

alter table "public"."roles" add column "discord_role_id" text;

alter table "public"."user_profiles" add column "team_id" bigint;

CREATE UNIQUE INDEX discord_invites_pkey ON public.discord_invites USING btree (id);

CREATE UNIQUE INDEX discord_profiles_pkey ON public.discord_profiles USING btree (id);

CREATE UNIQUE INDEX invitations_pkey ON public.invitations USING btree (id);

CREATE UNIQUE INDEX requests_pkey ON public.requests USING btree (id);

CREATE UNIQUE INDEX teams_pkey ON public.teams USING btree (id);

alter table "public"."discord_invites" add constraint "discord_invites_pkey" PRIMARY KEY using index "discord_invites_pkey";

alter table "public"."discord_profiles" add constraint "discord_profiles_pkey" PRIMARY KEY using index "discord_profiles_pkey";

alter table "public"."invitations" add constraint "invitations_pkey" PRIMARY KEY using index "invitations_pkey";

alter table "public"."requests" add constraint "requests_pkey" PRIMARY KEY using index "requests_pkey";

alter table "public"."teams" add constraint "teams_pkey" PRIMARY KEY using index "teams_pkey";

alter table "public"."discord_invites" add constraint "discord_invites_user_profile_id_fkey" FOREIGN KEY (user_profile_id) REFERENCES user_profiles(user_id) not valid;

alter table "public"."discord_invites" validate constraint "discord_invites_user_profile_id_fkey";

alter table "public"."discord_profiles" add constraint "discord_profiles_user_profile_id_fkey" FOREIGN KEY (user_profile_id) REFERENCES user_profiles(user_id) not valid;

alter table "public"."discord_profiles" validate constraint "discord_profiles_user_profile_id_fkey";

alter table "public"."teams" add constraint "teams_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."teams" validate constraint "teams_team_id_fkey";

alter table "public"."user_profiles" add constraint "user_profiles_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_team_id_fkey";


